{"version":3,"sources":["styles/common/_susy.scss","styles/common/_layout.scss","../../../tools/node_modules/susy/sass/susy/_su-math.scss","styles/unit/_unit.scss","styles/common/_breakpoints.scss","components/infoblock.scss","styles.scss"],"names":[],"mappings":"AAoCA;;;;;;;EAOE;AA2BF;EAAI,+BAAsB;UAAtB,uBAAsB,EAAK;;AAU/B;;;;;;;;;;;;EAYE;AAgBF;;;;;;;;;;;EAWE;ACvHF;EDoGE,eAAc;EACd,gBET8C;EFY5C,ukCAAiF;ECtGnF,kBAAiB;EACjB,eAAc,EACf;EDsEC;IACE,YAAW;IACX,aAAY;IACZ,eAAc,EACf;;ACxEH;EDmHE,iBE7B8C;EFgC5C,aAAY;EACX,gBAAe;ECrHlB,aAAY,EACb;;AAED;ED8GE,iBE7B8C;EFmC5C,YAAW;EACX,uBEeuC,EDlI1C;;AEXC;EHuHA,YE7B8C;EFgC5C,aAAY;EACX,gBAAe;EGzHhB,oBAAmB,EAOpB;EC8BD;IDvCA;MHuHA,YE7B8C;MFgC5C,aAAY;MACX,gBAAe;MGrHd,qBAAa;MAAb,qBAAa;MAAb,cAAa;MACb,eAAc,EAEjB,EAAA;;AAED;EH4GA,YE7B8C;EFgC5C,aAAY;EACX,gBAAe;EG9GhB,UAAS,EAKV;ECqBD;ID5BA;MH4GA,iBE7B8C;MFmC5C,YAAW;MACX,uBEeuC,EC3HxC,EAAA;;AAED;EHmGA,YE7B8C;EFgC5C,aAAY;EACX,gBAAe;EGrGhB,qBAAa;EAAb,qBAAa;EAAb,cAAa;EACb,0BAAmB;MAAnB,uBAAmB;UAAnB,oBAAmB,EA0BpB;ECVD;IDnBA;MHmGA,iBE7B8C;MFgC5C,aAAY;MACX,gBAAe,EG1EjB,EAAA;EApBC;IACE,eAAc;IACd,iBAAgB;IAChB,mBAAkB,EAKnB;ICQH;MDhBE;QAMI,iBAAgB,EAEnB,EAAA;EAED;IHgFF,iBE7B8C;IFmC5C,YAAW;IACX,uBEeuC;ICpGrC,iBAAgB;IAChB,aAAY,EACb;EACD;IH2EF,iBE7B8C;IFgC5C,aAAY;IACX,gBAAe;IG7Ed,iBAAgB;IAChB,aAAY,EACb;;AAGH;EHoEA,YE7B8C;EFmC5C,YAAW;EACX,uBEeuC,ECpFxC;ECZD;IDMA;MHoEA,iBE7B8C;MFmC5C,YAAW;MACX,uBEeuC,ECpFxC,EAAA;;AAED;EH4DA,YE7B8C;EFmC5C,YAAW;EACX,uBEeuC,ECvExC;ECzBD;IDcA;MH4DA,iBE7B8C;MFmC5C,YAAW;MACX,uBEeuC,ECvExC,EAAA;EAXD;IAQI,gBAAe;IACf,aAAY,EACb;;AC9BH;EDiCA;IH+CA,iBE7B8C;IFmC5C,YAAW;IACX,uBEeuC,EC7DxC,EAAA;;ACnCD;ED2BA;IH+CA,iBE7B8C;IFgC5C,aAAY;IACX,gBAAe,EG3CjB,EAAA;;ACzCD;ED2CA;IHqCA,iBE7B8C;IFgC5C,aAAY;IACX,gBAAe,EGjCjB,EAAA;;AC7CD;EDqCA;IHqCA,iBE7B8C;IFmC5C,YAAW;IACX,uBEeuC,ECnDxC,EAAA;;ACnDD;EDqDA;IH2BA,iBE7B8C;IFgC5C,aAAY;IACX,gBAAe,EGvBjB,EAAA;;ACvDD;ED+CA;IH2BA,iBE7B8C;IFgC5C,aAAY;IACX,gBAAe,EGvBjB,EAAA;;AC7DD;ED+DA;IHiBA,YE7B8C;IFgC5C,aAAY;IACX,gBAAe,EGdjB,EAAA;;AChED;EDyDA;IHiBA,iBE7B8C;IFgC5C,aAAY;IACX,gBAAe,EGdjB,EAAA;;AE7GD;EACE,iBAAgB,EACjB;;AAED;EAEI,eAAc,EAaf;EAfH;IAIM,iBAAgB,EACjB;EALL;IAOM,sBAAqB;IACrB,oBAAmB;IACnB,iBAAgB,EACjB;EAVL;IAYM,sBAAqB;IACrB,oBAAmB,EACpB;;AAIL;EACE,sBAAqB;EACrB,cAAa;EACb,YAAW,EASZ;EDKD;ICjBA;MAMI,YAAW,EAMd,EAAA;EDWD;ICvBA;MASI,YAAW;MACX,aAAY,EAEf,EAAA;;ACtBH;EAEE,iBAAgB,EACjB","file":"styles.css","sourcesContent":["// Grid\n//\n// Project use <a href=\"http://oddbird.net/susy/docs/index.html\">SUSY</a> as a grid system.\n// This is a grids-on-demand system. 12 columns grid uses as default.\n//\n// $debug_state - variable for debugging layout (true - show background grid in block with \"container\" mixin)\n// $color-grid-0 - Colors for grid background\n// $color-grid-1 - Colors for grid background\n// $color-grid-2 - Colors for grid background\n// $color-grid-3 - Colors for grid background\n// $susy - Common settings for susy-grid\n// $sus1 - Settings #1 for susy container and debugging\n// $sus2 - Settings #2 for susy container and debugging\n// $sus3 - Settings #3 for susy container and debugging\n//\n// Styleguide: common.1-grid\n\n\n@import \"../../../../../tools/node_modules/susy/sass/susy\";\n@import \"../../../../../tools/node_modules/susy/sass/plugins/svg-grid\";\n\n$debug_state: true;\n\n$color-grid-0: rgba(250, 10, 100, 0.3) rgba(250, 10, 100, 0.5);\n$color-grid-1: rgba(19, 122, 243, 0.3) rgba(19, 122, 243, 0.5);\n$color-grid-2: rgba(0, 237, 83, 0.3) rgba(0, 237, 83, 0.5);\n$color-grid-3: rgba(253, 100, 123, 0.3) rgba(253, 100, 123, 0.5);\n\n$susy: (\n'columns': susy-repeat(12),\n'gutters': 0.2,\n'spread': 'narrow',\n'container-spread': 'narrow',\n'svg-grid-colors': $color-grid-0\n);\n\n/*\nMixins\n\nMixins for susy\n\nStyle guide: common.1-grid.mixins\n\n*/\n\n\n@mixin gradient($start, $end) {\n\n}\n\n\n// Settings\n$susy1: (\n        'columns': susy-repeat(12),\n        'spread': 'wide',\n        //'container-spread': 'wide',\n        'svg-grid-colors': $color-grid-1\n);\n\n$susy2: (\n        'columns': susy-repeat(12),\n        'svg-grid-colors': $color-grid-2,\n);\n\n$susy3: (\n        'columns': susy-repeat(4),\n        'svg-grid-colors': $color-grid-3,\n);\n\n// box-sizing\n* { box-sizing: border-box; }\n\n// clearfix\n@mixin clearfix {\n  &::after {\n    clear: both;\n    content: ' ';\n    display: table;\n  }\n}\n/*\n\ncontainer($width, $config, $debug)\n\nCreates a container with parameters.\n\n$width  - Width of container in \"span\" format.\n$config - Susy config (span, gutter, color of background grid).\n$debug  - Show background grid if \"true\".\n\nStyleguide common.1-grid.mixins.container\n\n*/\n@mixin container($width: all, $config: $susy, $debug: false) {\n  $config: susy-settings($config);\n  $container-spread: map-get($config, 'container-spread');\n  $grid-colors: map-get($config, 'svg-grid-colors');\n  $width: span($width $container-spread of $container-spread, $config);\n\n  @include clearfix;\n  margin: 0 auto;\n  max-width: $width or 100%;\n\n  @if $debug {\n    background: susy-svg-grid($grid: $config, $colors: $grid-colors) no-repeat scroll;\n  }\n}\n\n/*\n\nspan($span, $config)\n\nCreates a container with parameters.\n\n$span  - Width of container in \"column\".\n$config - Susy config (span, gutter, color of background grid).\n\nStyleguide common.1-grid.mixins.container\n\n*/\n@mixin span($span, $config: $susy) {\n  width: span($span, $config);\n\n  @if index($span, 'last') {\n    float: right;\n     margin-right: 0; //if you want an explicit reset\n  } @else {\n    float: left;\n    margin-right: gutter();\n  }\n}\n\n@mixin site-width {\n  margin: 0 auto;\n\n  @include wide {\n    max-width: 1200px;\n  }\n}\n\n",".layout-container {\n  @include container($config: $susy1, $debug: $debug_state);\n  max-width: 1000px;\n  margin: 0 auto;\n}\n\n.layout-content {\n  @include span(9 last);\n  float: right;\n}\n\n.layout-sidebar-first {\n  @include span(3);\n}","/// Grid Math Engine\n/// ================\n/// The `su` functions give you direct access to the math layer,\n/// without any syntax-sugar like shorthand parsing, and normalization.\n/// If you prefer named arguments, and stripped-down syntax,\n/// you can use these functions directly in your code –\n/// replacing `span`, `gutter`, and `slice`.\n///\n/// These functions are also useful\n/// for building mixins or other extensions to Susy.\n/// Apply the Susy syntax to new mixins and functions,\n/// using our \"Plugin Helpers\",\n/// or write your own syntax and pass the normalized results along\n/// to `su` for compilation.\n///\n/// @group su-math\n///\n/// @see su-span\n/// @see su-gutter\n/// @see su-slice\n/// @ignore _su-sum\n/// @ignore _su-calc-span\n/// @ignore _su-calc-sum\n/// @ignore _su-needs-calc-output\n\n\n\n// Su Span\n// -------\n/// Calculates and returns a CSS-ready span width,\n/// based on normalized span and context data –\n/// a low-level version of `susy-span`,\n/// with all of the logic and none of the syntax sugar.\n///\n/// - Grids defined with unitless numbers will return `%` values.\n/// - Grids defined with comparable units\n///   will return a value in the units provided.\n/// - Grids defined with a mix of units,\n///   or a combination of untiless numbers and unit-lengths,\n///   will return a `calc()` string.\n///\n/// @group su-math\n/// @see susy-span\n///\n/// @param {number | list} $span -\n///   Number or list of grid columns to span\n/// @param {list} $columns -\n///   List of columns available\n/// @param {number} $gutters -\n///   Width of a gutter in column-comparable units\n/// @param {0 | 1 | -1} $spread -\n///   Number of gutters spanned,\n///   relative to `span` count\n/// @param {0 | 1 | -1} $container-spread [$spread] -\n///   Number of gutters spanned,\n///   relative to `columns` count\n/// @param {integer} $location [1] -\n///   Optional position of sub-span among full set of columns\n///\n/// @return {length} -\n///   Relative or static length of a span on the grid\n@function su-span(\n  $span,\n  $columns,\n  $gutters,\n  $spread,\n  $container-spread: $spread,\n  $location: 1\n) {\n  $span: su-valid-span($span);\n  $columns: su-valid-columns($columns);\n  $gutters: su-valid-gutters($gutters);\n  $spread: su-valid-spread($spread);\n\n  @if (type-of($span) == 'number') {\n    @if (not unitless($span)) {\n      @return $span;\n    }\n\n    $location: su-valid-location($span, $location, $columns);\n    $span: su-slice($span, $columns, $location, $validate: false);\n  }\n\n  @if _su-needs-calc-output($span, $columns, $gutters, $spread, not 'validate') {\n    @return _su-calc-span($span, $columns, $gutters, $spread, $container-spread, not 'validate');\n  }\n\n  $span-width: _su-sum($span, $gutters, $spread, $validate: false);\n\n  @if unitless($span-width) {\n    $container-spread: su-valid-spread($container-spread);\n    $container: _su-sum($columns, $gutters, $container-spread, $validate: false);\n    @return percentage($span-width / $container);\n  }\n\n  @return $span-width;\n}\n\n\n\n// Su Gutter\n// ---------\n/// Calculates and returns a CSS-ready gutter width,\n/// based on normalized grid data –\n/// a low-level version of `susy-gutter`,\n/// with all of the logic and none of the syntax sugar.\n///\n/// - Grids defined with unitless numbers will return `%` values.\n/// - Grids defined with comparable units\n///   will return a value in the units provided.\n/// - Grids defined with a mix of units,\n///   or a combination of untiless numbers and unit-lengths,\n///   will return a `calc()` string.\n///\n/// @group su-math\n/// @see susy-gutter\n///\n/// @param {list} $columns -\n///   List of columns in the grid\n/// @param {number} $gutters -\n///   Width of a gutter in column-comparable units\n/// @param {0 | 1 | -1} $container-spread -\n///   Number of gutters spanned,\n///   relative to `columns` count\n///\n/// @return {length} -\n///   Relative or static length of one gutter in a grid\n@function su-gutter(\n  $columns,\n  $gutters,\n  $container-spread\n) {\n  @if (type-of($gutters) == 'number') {\n    @if ($gutters == 0) or (not unitless($gutters)) {\n      @return $gutters;\n    }\n  }\n\n  @if _su-needs-calc-output($gutters, $columns, $gutters, -1, not 'validate') {\n    @return _su-calc-span($gutters, $columns, $gutters, -1, $container-spread, not 'validate');\n  }\n\n  $container: _su-sum($columns, $gutters, $container-spread);\n  @return percentage($gutters / $container);\n}\n\n\n\n// Su Slice\n// --------\n/// Returns a list of columns\n/// based on a given span/location slice of the grid –\n/// a low-level version of `susy-slice`,\n/// with all of the logic and none of the syntax sugar.\n///\n/// @group su-math\n/// @see susy-slice\n///\n/// @param {number} $span -\n///   Number of grid columns to span\n/// @param {list} $columns -\n///   List of columns in the grid\n/// @param {number} $location [1] -\n///   Starting index of a span in the list of columns\n/// @param {bool} $validate [true] -\n///   Check that arguments are valid before proceeding\n///\n/// @return {list} -\n///   Subset list of grid columns, based on span and location\n@function su-slice(\n  $span,\n  $columns,\n  $location: 1,\n  $validate: true\n) {\n  @if $validate {\n    $columns: su-valid-columns($columns);\n    $location: su-valid-location($span, $location, $columns);\n  }\n\n  $floor: floor($span);\n  $sub-columns: ();\n\n  @for $i from $location to ($location + $floor) {\n    $sub-columns: append($sub-columns, nth($columns, $i));\n  }\n\n  @if $floor != $span {\n    $remainder: $span - $floor;\n    $column: $location + $floor;\n    $sub-columns: append($sub-columns, nth($columns, $column) * $remainder);\n  }\n\n  @return $sub-columns;\n}\n\n\n\n// Su Sum\n// ------\n/// Get the total sum of column-units in a layout.\n///\n/// @group su-math\n/// @access private\n///\n/// @param {list} $columns -\n///   List of columns in the grid\n/// @param {number} $gutters -\n///   Width of a gutter in column-comparable units\n/// @param {0 | 1 | -1} $spread -\n///   Number of gutters spanned,\n///   relative to `columns` count\n/// @param {bool} $validate [true] -\n///   Check that arguments are valid before proceeding\n///\n/// @return {number} -\n///   Total sum of column-units in a grid\n@function _su-sum(\n  $columns,\n  $gutters,\n  $spread,\n  $validate: true\n) {\n  @if $validate {\n    $columns: su-valid-span($columns);\n    $gutters: su-valid-gutters($gutters);\n    $spread: su-valid-spread($spread);\n  }\n\n  // Calculate column-sum\n  $column-sum: 0;\n  @each $column in $columns {\n    $column-sum: $column-sum + $column;\n  }\n\n  $gutter-sum: (ceil(length($columns)) + $spread) * $gutters;\n  $total: if(($gutter-sum > 0), $column-sum + $gutter-sum, $column-sum);\n\n  @return $total;\n}\n\n\n\n// Su Calc\n// -------\n/// Return a usable span width as a `calc()` function,\n/// in order to create mixed-unit grids.\n///\n/// @group su-math\n/// @access private\n///\n/// @param {number | list} $span -\n///   Pre-sliced list of grid columns to span\n/// @param {list} $columns -\n///   List of columns available\n/// @param {number} $gutters -\n///   Width of a gutter in column-comparable units\n/// @param {0 | 1 | -1} $spread -\n///   Number of gutters spanned,\n///   relative to `span` count\n/// @param {0 | 1 | -1} $container-spread [$spread] -\n///   Number of gutters spanned,\n///   relative to `columns` count\n/// @param {bool} $validate [true] -\n///   Check that arguments are valid before proceeding\n///\n/// @return {length} -\n///   Relative or static length of a span on the grid\n@function _su-calc-span(\n  $span,\n  $columns,\n  $gutters,\n  $spread,\n  $container-spread: $spread,\n  $validate: true\n) {\n  @if $validate {\n    $span: su-valid-span($span);\n    $columns: su-valid-columns($columns);\n    $gutters: su-valid-gutters($gutters);\n    $spread: su-valid-spread($spread);\n    $container-spread: su-valid-spread($container-spread);\n  }\n\n  // Span and context\n  $span: _su-calc-sum($span, $gutters, $spread, not 'validate');\n  $context: _su-calc-sum($columns, $gutters, $container-spread, not 'validate');\n\n  // Fixed and fluid\n  $fixed-span: map-get($span, 'fixed');\n  $fluid-span: map-get($span, 'fluid');\n  $fixed-context: map-get($context, 'fixed');\n  $fluid-context: map-get($context, 'fluid');\n\n  $calc: '#{$fixed-span}';\n  $fluid-calc: '(100% - #{$fixed-context})';\n\n  // Fluid-values\n  @if (not $fluid-span) {\n    $fluid-calc: null;\n  } @else if ($fluid-span != $fluid-context) {\n    $fluid-span: '* #{$fluid-span}';\n    $fluid-context: if($fluid-context, '/ #{$fluid-context}', '');\n    $fluid-calc: '(#{$fluid-calc $fluid-context $fluid-span})';\n  }\n\n  @if $fluid-calc {\n    $calc: if(($calc != ''), '#{$calc} + ', '');\n    $calc: '#{$calc + $fluid-calc}';\n  }\n\n  @return calc(#{unquote($calc)});\n}\n\n\n\n// Su Calc-Sum\n// -----------\n/// Get the total sum of fixed and fluid column-units\n/// for creating a mixed-unit layout with `calc()` values.\n///\n/// @group su-math\n/// @access private\n///\n/// @param {list} $columns -\n///   List of columns available\n/// @param {number} $gutters -\n///   Width of a gutter in column-comparable units\n/// @param {0 | 1 | -1} $spread -\n///   Number of gutters spanned,\n///   relative to `span` count\n/// @param {bool} $validate [true] -\n///   Check that arguments are valid before proceeding\n///\n/// @return {map} -\n///   Map with `fixed` and `fluid` keys\n///   containing the proper math as strings\n@function _su-calc-sum(\n  $columns,\n  $gutters,\n  $spread,\n  $validate: true\n) {\n  @if $validate {\n    $columns: su-valid-span($columns);\n    $gutters: su-valid-gutters($gutters);\n    $spread: su-valid-spread($spread);\n  }\n\n  $fluid: 0;\n  $fixed: ();\n  $calc: null;\n\n  // Gutters\n  $gutters:  $gutters * (length($columns) + $spread);\n\n  // Columns\n  @each $col in append($columns, $gutters) {\n    @if unitless($col) {\n      $fluid: $fluid + $col;\n    } @else {\n      $fixed: _su-map-add-units($fixed, $col);\n    }\n  }\n\n  // Compile Fixed Units\n  @each $unit, $total in $fixed {\n    @if ($total != (0 * $total)) {\n      $calc: if($calc, '#{$calc} + #{$total}', '#{$total}');\n    }\n  }\n\n  // Calc null or string\n  @if $calc {\n    $calc: if(str-index($calc, '+'), '(#{$calc})', '#{$calc}');\n  }\n\n  // Fluid 0 => null\n  $fluid: if(($fluid == 0), null, $fluid);\n\n\n  // Return map\n  $return: (\n    'fixed': $calc,\n    'fluid': $fluid,\n  );\n\n  @return $return;\n}\n\n\n\n// Needs Calc\n// ----------\n/// Check if `calc()` will be needed in defining a span,\n/// if the necessary units in a grid are not comparable.\n///\n/// @group su-math\n/// @access private\n///\n/// @param {list} $span -\n///   Slice of columns to span\n/// @param {list} $columns -\n///   List of available columns in the grid\n/// @param {number} $gutters -\n///   Width of a gutter\n/// @param {0 | 1 | -1} $spread -\n///   Number of gutters spanned,\n///   relative to `span` count\n/// @param {bool} $validate [true] -\n///   Check that arguments are valid before proceeding\n///\n/// @return {bool} -\n///   `True` when units do not match, and `calc()` will be required\n@function _su-needs-calc-output(\n  $span,\n  $columns,\n  $gutters,\n  $spread,\n  $validate: true\n) {\n  @if $validate {\n    $span: su-valid-span($span);\n    $columns: su-valid-columns($columns);\n    $gutters: su-valid-gutters($gutters);\n  }\n\n  $has-gutter: if((length($span) > 1) or ($spread >= 0), true, false);\n  $check: if($has-gutter, append($span, $gutters), $span);\n  $safe-span: _su-is-comparable($check...);\n\n  @if ($safe-span == 'static') {\n    @return false;\n  } @else if (not $safe-span) {\n    @return true;\n  }\n\n  $safe-fluid: _su-is-comparable($gutters, $columns...);\n\n  @return not $safe-fluid;\n}\n",".es-unit {\n\n  &__header {\n    @include span(12 last);\n    margin-bottom: 10px;\n\n    @include tablet {\n      @include span(9 of 9 last);\n      display: flex;\n      margin: 10px 0;\n    }\n  }\n\n  &__title {\n    @include span(12 last);\n    margin: 0;\n\n    @include tablet {\n      @include span(6);\n    }\n  }\n\n  &__info {\n    @include span(12 last);\n    display: flex;\n    align-items: center;\n\n    @include tablet {\n      @include span(6 last);\n    }\n\n    &-eur, &-km {\n      padding: 0 5px;\n      font-size: 1.3em;\n      text-align: center;\n\n      @include desktop {\n        font-size: 1.8em;\n      }\n    }\n\n    &-eur {\n      @include span(6);\n      background: #555;\n      color: white;\n    }\n    &-km {\n      @include span(6 last);\n      background: #999;\n      color: black;\n    }\n  }\n\n  &-carousel {\n    @include span(9 of 9);\n\n    @include desktop {\n      @include span(6 of 9);\n    }\n  }\n\n  &__image {\n    @include span(9 of 9);\n\n    @include desktop {\n      @include span(6 of 9);\n    }\n\n    img {\n      max-width: 100%;\n      height: auto;\n    }\n  }\n\n  &__seller {\n    @include tablet {\n      @include span(4 of 9);\n    }\n    @include desktop {\n      @include span(3 of 9 last);\n    }\n\n  }\n\n  &__spec {\n    @include tablet {\n      @include span(5 of 9 last);\n    }\n    @include desktop {\n      @include span(3 of 9);\n    }\n\n  }\n\n  &__information {\n    @include tablet {\n      @include span(4 of 9 last);\n    }\n    @include desktop {\n      @include span(6 of 9 last);\n    }\n\n  }\n\n  &-spotlight {\n    @include tablet {\n      @include span(9 of 9 last);\n    }\n    @include desktop {\n      @include span(6 of 9 last);\n    }\n  }\n}\n\n","// Breakpoints\n//\n// The project uses a mobile first approach. For responsive design and theming components uses several breakpoints for different screen resolutions.\n// Each breakpoint is specified by the corresponding variable in pixels.\n// To set breakpoints for particular block or element, mixins are used.\n//\n// <pre class=\"prettyprint linenums lang-css\"><code data-language=\"css\">\n// .class {\n//   ... // Set common styles and styles for \"mobile\" resolution\n//\n//   @include tablet {\n//     ... // Set styles for \"tablet\" resolution\n//   }\n//\n//   @include desktop {\n//     ... // Set styles for \"desktop\" resolution.\n//   }\n//\n//   @include wide {\n//     ... // Set styles for \"wide desktop\" resolution.\n//   }\n//\n//   @include x-wide {\n//     ... // Set styles for \"extra wide desktop\" resolution.\n//   }\n// }\n//  </code></pre>\n//\n// $tablet-width - Maximal width for \"mobile\" resolution and Minimal width for \"tablet\" resolution.\n// $desktop-width - Maximal width for \"tablet\" resolution and Minimal width for \"desktop\" resolution.\n// $wide-desktop-width - Maximal width for \"desktop\" resolution and Minimal width for \"wide desktop\" resolution.\n// $x-wide-desktop-width - Maximal width for \"wide desktop\" resolution and Minimal width for \"extra wide desktop\" resolution.\n//\n// Styleguide common.2-breakpoints\n\n$tablet-width: 640px;\n$desktop-width: 960px;\n$wide-desktop-width: 1200px;\n$x-wide-desktop-width: 1600px;\n\n@mixin tablet {\n  @media (min-width: #{$tablet-width}) {\n    @content;\n  }\n}\n\n@mixin desktop {\n  @media (min-width: #{$desktop-width}) {\n    @content;\n  }\n}\n\n@mixin wide {\n  @media (min-width: #{$wide-desktop-width}) {\n    @content;\n  }\n}\n\n@mixin x-wide {\n  @media (min-width: #{$x-wide-desktop-width}) {\n    @content;\n  }\n}",".es-infoblock {\n\n  &__title {\n    margin: 0 0 10px;\n  }\n\n  &--specs {\n    .field {\n      padding: 5px 0;\n      &:nth-child(2n) {\n        background: #eee;\n      }\n      &__label {\n        display: inline-block;\n        vertical-align: top;\n        min-width: 150px;\n      }\n      &__item {\n        display: inline-block;\n        vertical-align: top;\n      }\n    }\n  }\n\n  &--seller {\n    background: lightgrey;\n    padding: 10px;\n    clear: both;\n    \n    @include tablet {\n      float: left;\n    }\n    @include desktop {\n      clear: none;\n      float: right;\n    }\n  }\n}","// Promo Card\n//\n// This promo card is used to promote content on the site.\n//\n// :hover - Hover state for the promo card.\n//\n// Style guide: components.card.promo\n\n@import \"styles/common/breakpoints\";\n@import \"styles/common/variables\";\n@import \"styles/common/susy\";\n@import \"styles/common/layout\";\n@import \"styles/unit/unit\";\n@import \"components\";\nbody {\n  //background: yellow;\n  line-height: 1.4;\n}"]}